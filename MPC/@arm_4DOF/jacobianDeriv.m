% This function returns the derivative of the Jacobian for the arm in a
% given state, taking handedness into account. If no state is specified as
% input, the function computes the derivative for the current state of the
% 'arm' object.
function J_dot = jacobianDeriv(arm, q)

% if no state specified, use current state of arm
if nargin < 8
    q = arm.q;
end

% Right now I only have the parameters for a right arm
J_dot(1,1) = arm.l4*(cos(q(4))*q(8)*(cos(q(3))*sin(q(1)) - ...
    cos(q(1))*sin(q(2))*sin(q(3))) - sin(q(4))*(sin(q(1))*sin(q(3))*q(7)...
    - cos(q(1))*cos(q(3))*q(5) + cos(q(1))*cos(q(2))*sin(q(3))*q(6) + ...
    cos(q(1))*cos(q(3))*sin(q(2))*q(7) - ...
    sin(q(1))*sin(q(2))*sin(q(3))*q(5)) + ...
    cos(q(2))*cos(q(4))*sin(q(1))*q(5) + ...
    cos(q(1))*cos(q(4))*sin(q(2))*q(6) + ...
    cos(q(1))*cos(q(2))*sin(q(4))*q(8)) + ...
    arm.l3*cos(q(2))*sin(q(1))*q(5) + arm.l3*cos(q(1))*sin(q(2))*q(6);
J_dot(1,2) = sin(q(1))*(arm.l3*cos(q(2))*q(6) + ...
    arm.l4*cos(q(2))*cos(q(4))*q(6) - arm.l4*sin(q(2))*sin(q(4))*q(8) - ...
    arm.l4*cos(q(2))*cos(q(3))*sin(q(4))*q(7) - ...
    arm.l4*cos(q(2))*cos(q(4))*sin(q(3))*q(8) + ...
    arm.l4*sin(q(2))*sin(q(3))*sin(q(4))*q(6)) + ...
    cos(q(1))*q(5)*(arm.l3*sin(q(2)) + arm.l4*cos(q(4))*sin(q(2)) - ...
    arm.l4*cos(q(2))*sin(q(3))*sin(q(4)));
J_dot(1,3) = arm.l4*cos(q(4))*q(8)*(cos(q(1))*sin(q(3)) - ...
    cos(q(3))*sin(q(1))*sin(q(2))) - ...
    arm.l4*sin(q(4))*(sin(q(1))*sin(q(3))*q(5) - ...
    cos(q(1))*cos(q(3))*q(7) + cos(q(1))*cos(q(3))*sin(q(2))*q(5) + ...
    cos(q(2))*cos(q(3))*sin(q(1))*q(6) - ...
    sin(q(1))*sin(q(2))*sin(q(3))*q(7));
J_dot(1,4) = arm.l4*(sin(q(4))*q(8)*(cos(q(1))*cos(q(3)) + ...
    sin(q(1))*sin(q(2))*sin(q(3))) - ...
    cos(q(4))*(cos(q(1))*sin(q(2))*sin(q(3))*q(5) - ...
    cos(q(1))*sin(q(3))*q(7) - cos(q(3))*sin(q(1))*q(5) + ...
    cos(q(2))*sin(q(1))*sin(q(3))*q(6) + ...
    cos(q(3))*sin(q(1))*sin(q(2))*q(7)) + ...
    cos(q(1))*cos(q(2))*sin(q(4))*q(5) + ...
    cos(q(2))*cos(q(4))*sin(q(1))*q(8) - ...
    sin(q(1))*sin(q(2))*sin(q(4))*q(6));


J_dot(2,1) = 0;
J_dot(2,2) = arm.l4*(cos(q(2))*sin(q(3))*sin(q(4))*q(6) - ...
    cos(q(2))*sin(q(4))*q(8) - cos(q(4))*sin(q(2))*q(6) + ...
    cos(q(3))*sin(q(2))*sin(q(4))*q(7) + ...
    cos(q(4))*sin(q(2))*sin(q(3))*q(8)) - arm.l3*sin(q(2))*q(6);
J_dot(2,3) = arm.l4*cos(q(3))*sin(q(2))*sin(q(4))*q(6) - ...
    arm.l4*cos(q(2))*cos(q(3))*cos(q(4))*q(8) + ...
    arm.l4*cos(q(2))*sin(q(3))*sin(q(4))*q(7);
J_dot(2,4) = -arm.l4*(cos(q(2))*sin(q(4))*q(6) + ...
    cos(q(4))*sin(q(2))*q(8) + cos(q(2))*cos(q(3))*cos(q(4))*q(7) - ...
    cos(q(4))*sin(q(2))*sin(q(3))*q(6) - ...
    cos(q(2))*sin(q(3))*sin(q(4))*q(8));


J_dot(3,1) = arm.l4*(sin(q(4))*(cos(q(1))*sin(q(2))*sin(q(3))*q(5) - ...
    cos(q(1))*sin(q(3))*q(7) - cos(q(3))*sin(q(1))*q(5) + ...
    cos(q(2))*sin(q(1))*sin(q(3))*q(6) + ...
    cos(q(3))*sin(q(1))*sin(q(2))*q(7)) + ...
    cos(q(4))*q(8)*(cos(q(1))*cos(q(3)) + ...
    sin(q(1))*sin(q(2))*sin(q(3))) + ...
    cos(q(1))*cos(q(2))*cos(q(4))*q(5) - ...
    cos(q(4))*sin(q(1))*sin(q(2))*q(6) - ...
    cos(q(2))*sin(q(1))*sin(q(4))*q(8)) + ...
    arm.l3*cos(q(1))*cos(q(2))*q(5) - arm.l3*sin(q(1))*sin(q(2))*q(6);
J_dot(3,2) = cos(q(1))*(arm.l3*cos(q(2))*q(6) + ...
    arm.l4*cos(q(2))*cos(q(4))*q(6) - arm.l4*sin(q(2))*sin(q(4))*q(8) - ...
    arm.l4*cos(q(2))*cos(q(3))*sin(q(4))*q(7) - ...
    arm.l4*cos(q(2))*cos(q(4))*sin(q(3))*q(8) + ...
    arm.l4*sin(q(2))*sin(q(3))*sin(q(4))*q(6)) - ...
    sin(q(1))*q(5)*(arm.l3*sin(q(2)) + arm.l4*cos(q(4))*sin(q(2)) - ...
    arm.l4*cos(q(2))*sin(q(3))*sin(q(4)));
J_dot(3,3) = -arm.l4*sin(q(4))*(cos(q(1))*sin(q(3))*q(5) + ...
    cos(q(3))*sin(q(1))*q(7) + cos(q(1))*cos(q(2))*cos(q(3))*q(6) - ...
    cos(q(3))*sin(q(1))*sin(q(2))*q(5) - ...
    cos(q(1))*sin(q(2))*sin(q(3))*q(7)) - ...
    arm.l4*cos(q(4))*q(8)*(sin(q(1))*sin(q(3)) + ...
    cos(q(1))*cos(q(3))*sin(q(2)));
J_dot(3,4) = -arm.l4*(cos(q(4))*(sin(q(1))*sin(q(3))*q(7) - ...
    cos(q(1))*cos(q(3))*q(5) + cos(q(1))*cos(q(2))*sin(q(3))*q(6) + ...
    cos(q(1))*cos(q(3))*sin(q(2))*q(7) - ...
    sin(q(1))*sin(q(2))*sin(q(3))*q(5)) + ...
    sin(q(4))*q(8)*(cos(q(3))*sin(q(1)) - ...
    cos(q(1))*sin(q(2))*sin(q(3))) - ...
    cos(q(1))*cos(q(2))*cos(q(4))*q(8) + ...
    cos(q(2))*sin(q(1))*sin(q(4))*q(5) + ...
    cos(q(1))*sin(q(2))*sin(q(4))*q(6));

if strcmp(arm.hand,'left')
    warning('Parameters are currently only defined for a right hand.')
end

% if strcmp(arm.hand,'right')
%     J_dot = [(-arm.l1*cos(q(1))*q(3) - arm.l2*cos(q(1)+q(2))*(q(3)+q(4))) -arm.l2*cos(q(1)+q(2))*(q(3)+q(4));
%              (-arm.l1*sin(q(1))*q(3) - arm.l2*sin(q(1)+q(2))*(q(3)+q(4))) -arm.l2*sin(q(1)+q(2))*(q(3)+q(4))];
% else
%     J_dot = [( arm.l1*cos(q(1))*q(3) + arm.l2*cos(q(1)+q(2))*(q(3)+q(4)))  arm.l2*cos(q(1)+q(2))*(q(3)+q(4));
%              (-arm.l1*sin(q(1))*q(3) - arm.l2*sin(q(1)+q(2))*(q(3)+q(4))) -arm.l2*sin(q(1)+q(2))*(q(3)+q(4))];
% end

end