% This function returns the equation of motion for the arm in its current
% state, represented in either joint or task space. In joint space, it is
% of the form q_dot = f(q,u) where u is the vector of joint torques. In
% task space, it is of the form x_dot = f(x,u) where u is the vector of
% hand forces.
function f = dynamics(arm, u, ctrlSpace)

% Comput the mass matrix
M11 = arm.I3 + arm.I4 + arm.l3^2*arm.m4*cos(arm.q(2))^2 + ...
    arm.m3*arm.s3^2*cos(arm.q(2))^2 + ...
    arm.m4*arm.s4^2*cos(arm.q(2))^2*cos(arm.q(4))^2 + ...
    arm.m4*arm.s4^2*cos(arm.q(3))^2*sin(arm.q(4))^2 + ...
    arm.m4*arm.s4^2*sin(arm.q(2))^2*sin(arm.q(3))^2*sin(arm.q(4))^2 + ...
    2*arm.l3*arm.m4*arm.s4*cos(arm.q(2))^2*cos(arm.q(4)) + ...
    2*arm.m4*arm.s4^2*cos(arm.q(2))*cos(arm.q(4))*sin(arm.q(2))*...
    sin(arm.q(3))*sin(arm.q(4)) + ...
    2*arm.l3*arm.m4*arm.s4*cos(arm.q(2))*sin(arm.q(2))*sin(arm.q(3))*...
    sin(arm.q(4));
M12 = arm.I3*cos(arm.q(1))*cos(arm.q(2)) + ...
    arm.I4*cos(arm.q(1))*cos(arm.q(2)) - ...
    arm.m4*arm.s4^2*cos(arm.q(2))*cos(arm.q(3))*sin(arm.q(3)) + ...
    arm.m4*arm.s4^2*cos(arm.q(3))*cos(arm.q(4))*sin(arm.q(2))*...
    sin(arm.q(4)) + ...
    arm.l3*arm.m4*arm.s4*cos(arm.q(3))*sin(arm.q(2))*sin(arm.q(4)) + ...
    arm.m4*arm.s4^2*cos(arm.q(2))*cos(arm.q(3))*...
    cos(arm.q(4))^2*sin(arm.q(3));
M13 = arm.I3*cos(arm.q(1)) + arm.I4*cos(arm.q(1)) - ...
    arm.m4*arm.s4^2*sin(arm.q(2)) + ...
    arm.m4*arm.s4^2*cos(arm.q(4))^2*sin(arm.q(2)) - ...
    arm.m4*arm.s4^2*cos(arm.q(2))*cos(arm.q(4))*sin(arm.q(3))*...
    sin(arm.q(4)) - ...
    arm.l3*arm.m4*arm.s4*cos(arm.q(2))*sin(arm.q(3))*sin(arm.q(4));
M14 = arm.m4*cos(arm.q(2))*cos(arm.q(3))*arm.s4^2 + ...
    arm.l3*arm.m4*cos(arm.q(2))*cos(arm.q(3))*cos(arm.q(4))*arm.s4 + ...
    arm.I4*cos(arm.q(1))*cos(arm.q(4)) + ...
    arm.I4*sin(arm.q(1))*sin(arm.q(4));

M21 = arm.I3*cos(arm.q(1))*cos(arm.q(2)) + ...
    arm.I4*cos(arm.q(1))*cos(arm.q(2)) - ...
    arm.m4*arm.s4^2*cos(arm.q(2))*cos(arm.q(3))*sin(arm.q(3)) + ...
    arm.m4*arm.s4^2*cos(arm.q(3))*cos(arm.q(4))*sin(arm.q(2))*...
    sin(arm.q(4)) + ...
    arm.l3*arm.m4*arm.s4*cos(arm.q(3))*sin(arm.q(2))*sin(arm.q(4)) + ...
    arm.m4*arm.s4^2*cos(arm.q(2))*cos(arm.q(3))*cos(arm.q(4))^2*...
    sin(arm.q(3));
M22 = arm.I3 + arm.I4 + arm.l3^2*arm.m4 + arm.m3*arm.s3^2 + ...
    (arm.m4*arm.s4^2)/2 - (arm.m4*arm.s4^2*cos(2*arm.q(3)))/2 + ...
    (arm.m4*arm.s4^2*cos(arm.q(4))^2)/2 + ...
    (arm.m4*arm.s4^2*cos(2*arm.q(3))*cos(arm.q(4))^2)/2 + ...
    2*arm.l3*arm.m4*arm.s4*cos(arm.q(4));
M23 = arm.I3*cos(arm.q(2)) + arm.I4*cos(arm.q(2)) - ...
    arm.m4*arm.s4*cos(arm.q(2))*cos(arm.q(3))*sin(arm.q(4))*(arm.s4*...
    (cos(arm.q(2))*cos(arm.q(4)) + ...
    sin(arm.q(2))*sin(arm.q(3))*sin(arm.q(4))) + arm.l3*cos(arm.q(2))) -...
    arm.m4*arm.s4*cos(arm.q(1))*sin(arm.q(4))*(sin(arm.q(1))*...
    sin(arm.q(3)) + ...
    cos(arm.q(1))*cos(arm.q(3))*sin(arm.q(2)))*(arm.l3*sin(arm.q(2)) + ...
    arm.s4*cos(arm.q(4))*sin(arm.q(2)) - ...
    arm.s4*cos(arm.q(2))*sin(arm.q(3))*sin(arm.q(4))) + ...
    arm.m4*arm.s4*sin(arm.q(1))*sin(arm.q(4))*(cos(arm.q(1))*...
    sin(arm.q(3)) - ...
    cos(arm.q(3))*sin(arm.q(1))*sin(arm.q(2)))*(arm.l3*sin(arm.q(2)) + ...
    arm.s4*cos(arm.q(4))*sin(arm.q(2)) - ...
    arm.s4*cos(arm.q(2))*sin(arm.q(3))*sin(arm.q(4)));
M24 = arm.I4*cos(arm.q(2))*cos(arm.q(4)) - ...
    arm.m4*arm.s4*(arm.s4*(cos(arm.q(2))*cos(arm.q(4)) + ...
    sin(arm.q(2))*sin(arm.q(3))*sin(arm.q(4))) + ...
    arm.l3*cos(arm.q(2)))*(sin(arm.q(2))*sin(arm.q(4)) + ...
    cos(arm.q(2))*cos(arm.q(4))*sin(arm.q(3))) + ...
    arm.m4*arm.s4*cos(arm.q(1))*(cos(arm.q(4))*(cos(arm.q(3))*...
    sin(arm.q(1)) - ...
    cos(arm.q(1))*sin(arm.q(2))*sin(arm.q(3))) + ...
    cos(arm.q(1))*cos(arm.q(2))*sin(arm.q(4)))*(arm.l3*sin(arm.q(2)) + ...
    arm.s4*cos(arm.q(4))*sin(arm.q(2)) - ...
    arm.s4*cos(arm.q(2))*sin(arm.q(3))*sin(arm.q(4))) - ...
    arm.m4*arm.s4*sin(arm.q(1))*(cos(arm.q(4))*(cos(arm.q(1))*...
    cos(arm.q(3)) + ...
    sin(arm.q(1))*sin(arm.q(2))*sin(arm.q(3))) - ...
    cos(arm.q(2))*sin(arm.q(1))*sin(arm.q(4)))*(arm.l3*sin(arm.q(2)) + ...
    arm.s4*cos(arm.q(4))*sin(arm.q(2)) - ...
    arm.s4*cos(arm.q(2))*sin(arm.q(3))*sin(arm.q(4)));

M31 = arm.I3*cos(arm.q(1)) + arm.I4*cos(arm.q(1)) - ...
    arm.m4*arm.s4^2*sin(arm.q(2)) + ...
    arm.m4*arm.s4^2*cos(arm.q(4))^2*sin(arm.q(2)) - ...
    arm.m4*arm.s4^2*cos(arm.q(2))*cos(arm.q(4))*sin(arm.q(3))*...
    sin(arm.q(4)) - ...
    arm.l3*arm.m4*arm.s4*cos(arm.q(2))*sin(arm.q(3))*sin(arm.q(4));
M32 = arm.I3*cos(arm.q(2)) + arm.I4*cos(arm.q(2)) - ...
    arm.m4*arm.s4*cos(arm.q(2))*cos(arm.q(3))*sin(arm.q(4))*...
    (arm.s4*(cos(arm.q(2))*cos(arm.q(4)) + ...
    sin(arm.q(2))*sin(arm.q(3))*sin(arm.q(4))) + arm.l3*cos(arm.q(2))) -...
    arm.m4*arm.s4*cos(arm.q(1))*sin(arm.q(4))*...
    (sin(arm.q(1))*sin(arm.q(3)) + ...
    cos(arm.q(1))*cos(arm.q(3))*sin(arm.q(2)))*(arm.l3*sin(arm.q(2)) + ...
    arm.s4*cos(arm.q(4))*sin(arm.q(2)) - ...
    arm.s4*cos(arm.q(2))*sin(arm.q(3))*sin(arm.q(4))) + ...
    arm.m4*arm.s4*sin(arm.q(1))*sin(arm.q(4))*(cos(arm.q(1))*...
    sin(arm.q(3)) - ...
    cos(arm.q(3))*sin(arm.q(1))*sin(arm.q(2)))*(arm.l3*sin(arm.q(2)) + ...
    arm.s4*cos(arm.q(4))*sin(arm.q(2)) - ...
    arm.s4*cos(arm.q(2))*sin(arm.q(3))*sin(arm.q(4)));
M33 = arm.I3 + arm.I4 + (arm.m4*arm.s4^2)/2 - ...
    (arm.m4*arm.s4^2*cos(2*arm.q(4)))/2;                                                                                             
M34 = arm.I4*cos(arm.q(4)) - ...
    arm.m4*arm.s4^2*sin(arm.q(4))*(cos(arm.q(4))*(cos(arm.q(3))*...
    sin(arm.q(1)) - ...
    cos(arm.q(1))*sin(arm.q(2))*sin(arm.q(3))) + ...
    cos(arm.q(1))*cos(arm.q(2))*sin(arm.q(4)))*(sin(arm.q(1))*...
    sin(arm.q(3)) + ...
    cos(arm.q(1))*cos(arm.q(3))*sin(arm.q(2))) - ...
    arm.m4*arm.s4^2*sin(arm.q(4))*(cos(arm.q(4))*(cos(arm.q(1))*...
    cos(arm.q(3)) + ...
    sin(arm.q(1))*sin(arm.q(2))*sin(arm.q(3))) - ...
    cos(arm.q(2))*sin(arm.q(1))*sin(arm.q(4)))*(cos(arm.q(1))*...
    sin(arm.q(3)) - ...
    cos(arm.q(3))*sin(arm.q(1))*sin(arm.q(2))) + ...
    arm.m4*arm.s4^2*cos(arm.q(2))*cos(arm.q(3))*sin(arm.q(4))*...
    (sin(arm.q(2))*sin(arm.q(4)) + ...
    cos(arm.q(2))*cos(arm.q(4))*sin(arm.q(3)));

M41 = arm.m4*cos(arm.q(2))*cos(arm.q(3))*arm.s4^2 + ...
    arm.l3*arm.m4*cos(arm.q(2))*cos(arm.q(3))*cos(arm.q(4))*arm.s4 + ...
    arm.I4*cos(arm.q(1))*cos(arm.q(4)) + ...
    arm.I4*sin(arm.q(1))*sin(arm.q(4));
M42 = arm.I4*cos(arm.q(2))*cos(arm.q(4)) - ...
    arm.m4*arm.s4*(arm.s4*(cos(arm.q(2))*cos(arm.q(4)) + ...
    sin(arm.q(2))*sin(arm.q(3))*sin(arm.q(4))) + ...
    arm.l3*cos(arm.q(2)))*(sin(arm.q(2))*sin(arm.q(4)) + ...
    cos(arm.q(2))*cos(arm.q(4))*sin(arm.q(3))) + ...
    arm.m4*arm.s4*cos(arm.q(1))*(cos(arm.q(4))*(cos(arm.q(3))*...
    sin(arm.q(1)) - ...
    cos(arm.q(1))*sin(arm.q(2))*sin(arm.q(3))) + ...
    cos(arm.q(1))*cos(arm.q(2))*sin(arm.q(4)))*(arm.l3*sin(arm.q(2)) + ...
    arm.s4*cos(arm.q(4))*sin(arm.q(2)) - ...
    arm.s4*cos(arm.q(2))*sin(arm.q(3))*sin(arm.q(4))) - ...
    arm.m4*arm.s4*sin(arm.q(1))*(cos(arm.q(4))*(cos(arm.q(1))*...
    cos(arm.q(3)) + ...
    sin(arm.q(1))*sin(arm.q(2))*sin(arm.q(3))) - ...
    cos(arm.q(2))*sin(arm.q(1))*sin(arm.q(4)))*(arm.l3*sin(arm.q(2)) + ...
    arm.s4*cos(arm.q(4))*sin(arm.q(2)) - ...
    arm.s4*cos(arm.q(2))*sin(arm.q(3))*sin(arm.q(4)));
M43 = arm.I4*cos(arm.q(4)) - ...
    arm.m4*arm.s4^2*sin(arm.q(4))*(cos(arm.q(4))*(cos(arm.q(3))*...
    sin(arm.q(1)) - ...
    cos(arm.q(1))*sin(arm.q(2))*sin(arm.q(3))) + ...
    cos(arm.q(1))*cos(arm.q(2))*sin(arm.q(4)))*(sin(arm.q(1))*...
    sin(arm.q(3)) + ...
    cos(arm.q(1))*cos(arm.q(3))*sin(arm.q(2))) - ...
    arm.m4*arm.s4^2*sin(arm.q(4))*(cos(arm.q(4))*(cos(arm.q(1))*...
    cos(arm.q(3)) + ...
    sin(arm.q(1))*sin(arm.q(2))*sin(arm.q(3))) - ...
    cos(arm.q(2))*sin(arm.q(1))*sin(arm.q(4)))*(cos(arm.q(1))*...
    sin(arm.q(3)) - ...
    cos(arm.q(3))*sin(arm.q(1))*sin(arm.q(2))) + ...
    arm.m4*arm.s4^2*cos(arm.q(2))*cos(arm.q(3))*sin(arm.q(4))*...
    (sin(arm.q(2))*sin(arm.q(4)) + ...
    cos(arm.q(2))*cos(arm.q(4))*sin(arm.q(3)));
M44 = arm.m4*arm.s4^2 + arm.I4;
 
M = [ M11 M12 M13 M14;
      M21 M22 M23 M24;
      M31 M32 M33 M34;
      M41 M42 M43 M44 ];
  
  
% Coriolis
B11 = 2*arm.l3^2*arm.m4*sin(arm.q(2))^2 - ...
    2*arm.m3*arm.s3^2*cos(arm.q(2))^2 - ...
    2*arm.l3^2*arm.m4*cos(arm.q(2))^2 + ...
    2*arm.m3*arm.s3^2*sin(arm.q(2))^2 - ...
    2*arm.m4*arm.s4^2*cos(arm.q(2))^2*cos(arm.q(4))^2 + ...
    2*arm.m4*arm.s4^2*cos(arm.q(4))^2*sin(arm.q(2))^2 + ...
    2*arm.m4*arm.s4^2*cos(arm.q(2))^2*sin(arm.q(3))^2*sin(arm.q(4))^2 - ...
    2*arm.m4*arm.s4^2*sin(arm.q(2))^2*sin(arm.q(3))^2*sin(arm.q(4))^2 - ...
    4*arm.l3*arm.m4*arm.s4*cos(arm.q(2))^2*cos(arm.q(4)) + ...
    4*arm.l3*arm.m4*arm.s4*cos(arm.q(4))*sin(arm.q(2))^2 - ...
    8*arm.m4*arm.s4^2*cos(arm.q(2))*cos(arm.q(4))*sin(arm.q(2))*...
    sin(arm.q(3))*sin(arm.q(4)) - ...
    8*arm.l3*arm.m4*arm.s4*cos(arm.q(2))*sin(arm.q(2))*sin(arm.q(3))*...
    sin(arm.q(4));
B12 = 4*arm.l3^2*arm.m4*sin(2*arm.q(2)) + ...
    4*arm.m3*arm.s3^2*sin(2*arm.q(2)) + ...
    8*arm.m4*arm.s4^2*cos(arm.q(2))*cos(arm.q(4))^2*sin(arm.q(2)) + ...
    16*arm.l3*arm.m4*arm.s4*cos(arm.q(2))*cos(arm.q(4))*sin(arm.q(2)) - ...
    8*arm.m4*arm.s4^2*cos(arm.q(2))^2*cos(arm.q(4))*sin(arm.q(3))*...
    sin(arm.q(4)) + ...
    8*arm.m4*arm.s4^2*cos(arm.q(4))*sin(arm.q(2))^2*sin(arm.q(3))*...
    sin(arm.q(4)) - ...
    8*arm.l3*arm.m4*arm.s4*cos(arm.q(2))^2*sin(arm.q(3))*sin(arm.q(4)) +...
    8*arm.l3*arm.m4*arm.s4*sin(arm.q(2))^2*sin(arm.q(3))*sin(arm.q(4)) -...
    8*arm.m4*arm.s4^2*cos(arm.q(2))*sin(arm.q(2))*sin(arm.q(3))^2*...
    sin(arm.q(4))^2;
B13 = 8*arm.l3^2*arm.m4*cos(arm.q(2))^2 + ...
    8*arm.m3*arm.s3^2*cos(arm.q(2))^2 - ...
    8*arm.l3^2*arm.m4*sin(arm.q(2))^2 - ...
    8*arm.m3*arm.s3^2*sin(arm.q(2))^2 + ...
    8*arm.m4*arm.s4^2*cos(arm.q(2))^2*cos(arm.q(4))^2 - ...
    8*arm.m4*arm.s4^2*cos(arm.q(4))^2*sin(arm.q(2))^2 - ...
    8*arm.m4*arm.s4^2*cos(arm.q(2))^2*sin(arm.q(3))^2*sin(arm.q(4))^2 + ...
    8*arm.m4*arm.s4^2*sin(arm.q(2))^2*sin(arm.q(3))^2*sin(arm.q(4))^2 + ...
    16*arm.l3*arm.m4*arm.s4*cos(arm.q(2))^2*cos(arm.q(4)) - ...
    16*arm.l3*arm.m4*arm.s4*cos(arm.q(4))*sin(arm.q(2))^2 + ...
    32*arm.m4*arm.s4^2*cos(arm.q(2))*cos(arm.q(4))*sin(arm.q(2))*...
    sin(arm.q(3))*sin(arm.q(4)) + ...
    32*arm.l3*arm.m4*arm.s4*cos(arm.q(2))*sin(arm.q(2))*sin(arm.q(3))*...
    sin(arm.q(4)); 
B14 = -(cos(arm.q(1)) - cos(arm.q(2))*sin(arm.q(1)))*(arm.I3 + arm.I4);
B15 = arm.I3*cos(arm.q(1))*cos(arm.q(2)) + ...
    arm.I4*cos(arm.q(1))*cos(arm.q(2)) - ...
    arm.I4*cos(arm.q(1))*cos(arm.q(4)) - ...
    arm.I4*sin(arm.q(1))*sin(arm.q(4));
B16 = arm.I3*cos(arm.q(1)) + arm.I4*cos(arm.q(1)) + ...
    arm.I4*sin(arm.q(1) - arm.q(4));

B11 = arm.m4*arm.s4^2*sin(2*arm.q(3))*sin(arm.q(4))^2;
B22 = (cos(arm.q(1)) + cos(arm.q(2))*sin(arm.q(1)))*(arm.I3 + arm.I4);
B23 = arm.I3*cos(arm.q(1))*cos(arm.q(2)) + ...
    arm.I4*cos(arm.q(1))*cos(arm.q(2)) + ...
    arm.I4*cos(arm.q(1))*cos(arm.q(4)) + ...
    arm.I4*sin(arm.q(1))*sin(arm.q(4));
B24 = -4*arm.m4*arm.s4^2*sin(2*arm.q(3))*sin(arm.q(4))^2;
B25 = 8*arm.m4*arm.s4^2*cos(2*arm.q(3))*(cos(arm.q(4))^2 - 1);
B26 = 0;

B31 = -(cos(arm.q(1)) + cos(arm.q(2))*sin(arm.q(1)))*(arm.I3 + arm.I4);
B32 = arm.m4*arm.s4^2*sin(2*arm.q(4));
B33 = arm.I3*cos(arm.q(1)) + arm.I4*cos(arm.q(1)) - ...
    arm.I4*sin(arm.q(1) - arm.q(4));
B34 = 2*arm.m4*arm.s4^2*cos(2*arm.q(4));
B35 = 0;
B36 = -8*arm.m4*arm.s4^2*cos(2*arm.q(4));

B41 = 0;
B42 = arm.I4*sin(arm.q(1) - arm.q(4)) - arm.I4*cos(arm.q(1)) - ...
    arm.I3*cos(arm.q(1));
B43 = 2*arm.m4*arm.s4;
B44 = 0;
B45 = 2*arm.m4;
B46 = 0;
 
B = [ B11 B12 B13 B14 B15 B16;
      B21 B22 B23 B24 B25 B26;
      B31 B32 B33 B34 B35 B36;
      B41 B42 B43 B44 B45 B46;
      B51 B52 B53 B54 B55 B56;
      B61 B62 B63 B64 B65 B66 ];
  
  
% Centrifugal

  
  

V1 = -arm.q(4)*(2*arm.q(3) + arm.q(4));
V2 = arm.q(3)^2;
V = [V1;V2] * a2*sin(arm.q(2));

G = [0;0];

Fric = arm.B*arm.q(3:4);

% if necessary convert dynamics matrices to task space
if strcmp(ctrlSpace,'joint')
    f = [arm.q(3:4) ; M\(u-V-G-Fric)];
else
    J = arm.jacobian();
    J_dot = arm.jacobianDeriv();
    Mx = J'\(M/J);
    Vx = J'\(V - (M/J)*J_dot*arm.q(3:4));
    Gx = J'\G;
    Fricx = J'\Fric;
    f = [arm.x(3:4) ; Mx\(u-Vx-Gx-Fricx)];
end

end