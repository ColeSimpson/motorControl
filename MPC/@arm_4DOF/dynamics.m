% This function returns the exuation of motion for the arm in its current
% state, represented in either joint or task space. In joint space, it is
% of the form x_dot = f(x,u) where u is the vector of joint torxues. In
% task space, it is of the form x_dot = f(x,u) where u is the vector of
% hand forces.
function f = dynamics(arm, x, u)

% if no input is specified, use stored value
if nargin < 3
    u = arm.u.val;
    
    % if no state is specified, use current arm state
    if nargin < 2
        x = arm.x.val;
    end
end

% Mass matrix
M11 = arm.I3 + arm.I4 + arm.l3^2*arm.m4*cos(x(2))^2 + ...
    arm.m3*arm.s3^2*cos(x(2))^2 + ...
    arm.m4*arm.s4^2*cos(x(2))^2*cos(x(4))^2 + ...
    arm.m4*arm.s4^2*cos(x(3))^2*sin(x(4))^2 + ...
    arm.m4*arm.s4^2*sin(x(2))^2*sin(x(3))^2*sin(x(4))^2 + ...
    2*arm.l3*arm.m4*arm.s4*cos(x(2))^2*cos(x(4)) + ...
    2*arm.m4*arm.s4^2*cos(x(2))*cos(x(4))*sin(x(2))*...
    sin(x(3))*sin(x(4)) + ...
    2*arm.l3*arm.m4*arm.s4*cos(x(2))*sin(x(2))*sin(x(3))*...
    sin(x(4));
M12 = arm.I3*cos(x(1))*cos(x(2)) + ...
    arm.I4*cos(x(1))*cos(x(2)) - ...
    arm.m4*arm.s4^2*cos(x(2))*cos(x(3))*sin(x(3)) + ...
    arm.m4*arm.s4^2*cos(x(3))*cos(x(4))*sin(x(2))*...
    sin(x(4)) + ...
    arm.l3*arm.m4*arm.s4*cos(x(3))*sin(x(2))*sin(x(4)) + ...
    arm.m4*arm.s4^2*cos(x(2))*cos(x(3))*...
    cos(x(4))^2*sin(x(3));
M13 = arm.I3*cos(x(1)) + arm.I4*cos(x(1)) - ...
    arm.m4*arm.s4^2*sin(x(2)) + ...
    arm.m4*arm.s4^2*cos(x(4))^2*sin(x(2)) - ...
    arm.m4*arm.s4^2*cos(x(2))*cos(x(4))*sin(x(3))*...
    sin(x(4)) - ...
    arm.l3*arm.m4*arm.s4*cos(x(2))*sin(x(3))*sin(x(4));
M14 = arm.m4*cos(x(2))*cos(x(3))*arm.s4^2 + ...
    arm.l3*arm.m4*cos(x(2))*cos(x(3))*cos(x(4))*arm.s4 + ...
    arm.I4*cos(x(1))*cos(x(4)) + ...
    arm.I4*sin(x(1))*sin(x(4));

M21 = M12;
M22 = arm.I3 + arm.I4 + arm.l3^2*arm.m4 + arm.m3*arm.s3^2 + ...
    (arm.m4*arm.s4^2)/2 - (arm.m4*arm.s4^2*cos(2*x(3)))/2 + ...
    (arm.m4*arm.s4^2*cos(x(4))^2)/2 + ...
    (arm.m4*arm.s4^2*cos(2*x(3))*cos(x(4))^2)/2 + ...
    2*arm.l3*arm.m4*arm.s4*cos(x(4));
M23 = arm.I3*cos(x(2)) + arm.I4*cos(x(2)) - ...
    arm.m4*arm.s4*cos(x(2))*cos(x(3))*sin(x(4))*(arm.s4*...
    (cos(x(2))*cos(x(4)) + ...
    sin(x(2))*sin(x(3))*sin(x(4))) + arm.l3*cos(x(2))) -...
    arm.m4*arm.s4*cos(x(1))*sin(x(4))*(sin(x(1))*...
    sin(x(3)) + ...
    cos(x(1))*cos(x(3))*sin(x(2)))*(arm.l3*sin(x(2)) + ...
    arm.s4*cos(x(4))*sin(x(2)) - ...
    arm.s4*cos(x(2))*sin(x(3))*sin(x(4))) + ...
    arm.m4*arm.s4*sin(x(1))*sin(x(4))*(cos(x(1))*...
    sin(x(3)) - ...
    cos(x(3))*sin(x(1))*sin(x(2)))*(arm.l3*sin(x(2)) + ...
    arm.s4*cos(x(4))*sin(x(2)) - ...
    arm.s4*cos(x(2))*sin(x(3))*sin(x(4)));
M24 = arm.I4*cos(x(2))*cos(x(4)) - ...
    arm.m4*arm.s4*(arm.s4*(cos(x(2))*cos(x(4)) + ...
    sin(x(2))*sin(x(3))*sin(x(4))) + ...
    arm.l3*cos(x(2)))*(sin(x(2))*sin(x(4)) + ...
    cos(x(2))*cos(x(4))*sin(x(3))) + ...
    arm.m4*arm.s4*cos(x(1))*(cos(x(4))*(cos(x(3))*...
    sin(x(1)) - ...
    cos(x(1))*sin(x(2))*sin(x(3))) + ...
    cos(x(1))*cos(x(2))*sin(x(4)))*(arm.l3*sin(x(2)) + ...
    arm.s4*cos(x(4))*sin(x(2)) - ...
    arm.s4*cos(x(2))*sin(x(3))*sin(x(4))) - ...
    arm.m4*arm.s4*sin(x(1))*(cos(x(4))*(cos(x(1))*...
    cos(x(3)) + ...
    sin(x(1))*sin(x(2))*sin(x(3))) - ...
    cos(x(2))*sin(x(1))*sin(x(4)))*(arm.l3*sin(x(2)) + ...
    arm.s4*cos(x(4))*sin(x(2)) - ...
    arm.s4*cos(x(2))*sin(x(3))*sin(x(4)));

M31 = M13;
M32 = M23;
M33 = arm.I3 + arm.I4 + (arm.m4*arm.s4^2)/2 - ...
    (arm.m4*arm.s4^2*cos(2*x(4)))/2;                                                                                             
M34 = arm.I4*cos(x(4)) - ...
    arm.m4*arm.s4^2*sin(x(4))*(cos(x(4))*(cos(x(3))*...
    sin(x(1)) - ...
    cos(x(1))*sin(x(2))*sin(x(3))) + ...
    cos(x(1))*cos(x(2))*sin(x(4)))*(sin(x(1))*...
    sin(x(3)) + ...
    cos(x(1))*cos(x(3))*sin(x(2))) - ...
    arm.m4*arm.s4^2*sin(x(4))*(cos(x(4))*(cos(x(1))*...
    cos(x(3)) + ...
    sin(x(1))*sin(x(2))*sin(x(3))) - ...
    cos(x(2))*sin(x(1))*sin(x(4)))*(cos(x(1))*...
    sin(x(3)) - ...
    cos(x(3))*sin(x(1))*sin(x(2))) + ...
    arm.m4*arm.s4^2*cos(x(2))*cos(x(3))*sin(x(4))*...
    (sin(x(2))*sin(x(4)) + ...
    cos(x(2))*cos(x(4))*sin(x(3)));

M41 = M14;
M42 = M24;
M43 = M34;
M44 = arm.m4*arm.s4^2 + arm.I4;
 
M = [ M11 M12 M13 M14;
      M21 M22 M23 M24;
      M31 M32 M33 M34;
      M41 M42 M43 M44 ];
  
  
% Coriolis
B11 = 2*arm.l3^2*arm.m4*sin(x(2))^2 - ...
    2*arm.m3*arm.s3^2*cos(x(2))^2 - ...
    2*arm.l3^2*arm.m4*cos(x(2))^2 + ...
    2*arm.m3*arm.s3^2*sin(x(2))^2 - ...
    2*arm.m4*arm.s4^2*cos(x(2))^2*cos(x(4))^2 + ...
    2*arm.m4*arm.s4^2*cos(x(4))^2*sin(x(2))^2 + ...
    2*arm.m4*arm.s4^2*cos(x(2))^2*sin(x(3))^2*sin(x(4))^2 - ...
    2*arm.m4*arm.s4^2*sin(x(2))^2*sin(x(3))^2*sin(x(4))^2 - ...
    4*arm.l3*arm.m4*arm.s4*cos(x(2))^2*cos(x(4)) + ...
    4*arm.l3*arm.m4*arm.s4*cos(x(4))*sin(x(2))^2 - ...
    8*arm.m4*arm.s4^2*cos(x(2))*cos(x(4))*sin(x(2))*...
    sin(x(3))*sin(x(4)) - ...
    8*arm.l3*arm.m4*arm.s4*cos(x(2))*sin(x(2))*sin(x(3))*...
    sin(x(4));
B12 = 4*arm.l3^2*arm.m4*sin(2*x(2)) + ...
    4*arm.m3*arm.s3^2*sin(2*x(2)) + ...
    8*arm.m4*arm.s4^2*cos(x(2))*cos(x(4))^2*sin(x(2)) + ...
    16*arm.l3*arm.m4*arm.s4*cos(x(2))*cos(x(4))*sin(x(2)) - ...
    8*arm.m4*arm.s4^2*cos(x(2))^2*cos(x(4))*sin(x(3))*...
    sin(x(4)) + ...
    8*arm.m4*arm.s4^2*cos(x(4))*sin(x(2))^2*sin(x(3))*...
    sin(x(4)) - ...
    8*arm.l3*arm.m4*arm.s4*cos(x(2))^2*sin(x(3))*sin(x(4)) +...
    8*arm.l3*arm.m4*arm.s4*sin(x(2))^2*sin(x(3))*sin(x(4)) -...
    8*arm.m4*arm.s4^2*cos(x(2))*sin(x(2))*sin(x(3))^2*...
    sin(x(4))^2;
B13 = 8*arm.l3^2*arm.m4*cos(x(2))^2 + ...
    8*arm.m3*arm.s3^2*cos(x(2))^2 - ...
    8*arm.l3^2*arm.m4*sin(x(2))^2 - ...
    8*arm.m3*arm.s3^2*sin(x(2))^2 + ...
    8*arm.m4*arm.s4^2*cos(x(2))^2*cos(x(4))^2 - ...
    8*arm.m4*arm.s4^2*cos(x(4))^2*sin(x(2))^2 - ...
    8*arm.m4*arm.s4^2*cos(x(2))^2*sin(x(3))^2*sin(x(4))^2 + ...
    8*arm.m4*arm.s4^2*sin(x(2))^2*sin(x(3))^2*sin(x(4))^2 + ...
    16*arm.l3*arm.m4*arm.s4*cos(x(2))^2*cos(x(4)) - ...
    16*arm.l3*arm.m4*arm.s4*cos(x(4))*sin(x(2))^2 + ...
    32*arm.m4*arm.s4^2*cos(x(2))*cos(x(4))*sin(x(2))*...
    sin(x(3))*sin(x(4)) + ...
    32*arm.l3*arm.m4*arm.s4*cos(x(2))*sin(x(2))*sin(x(3))*...
    sin(x(4)); 
B14 = -(cos(x(1)) - cos(x(2))*sin(x(1)))*(arm.I3 + arm.I4);
B15 = arm.I3*cos(x(1))*cos(x(2)) + ...
    arm.I4*cos(x(1))*cos(x(2)) - ...
    arm.I4*cos(x(1))*cos(x(4)) - ...
    arm.I4*sin(x(1))*sin(x(4));
B16 = arm.I3*cos(x(1)) + arm.I4*cos(x(1)) + ...
    arm.I4*sin(x(1) - x(4));

B21 = arm.m4*arm.s4^2*sin(2*x(3))*sin(x(4))^2;
B22 = (cos(x(1)) + cos(x(2))*sin(x(1)))*(arm.I3 + arm.I4);
B23 = arm.I3*cos(x(1))*cos(x(2)) + ...
    arm.I4*cos(x(1))*cos(x(2)) + ...
    arm.I4*cos(x(1))*cos(x(4)) + ...
    arm.I4*sin(x(1))*sin(x(4));
B24 = -4*arm.m4*arm.s4^2*sin(2*x(3))*sin(x(4))^2;
B25 = 8*arm.m4*arm.s4^2*cos(2*x(3))*(cos(x(4))^2 - 1);
B26 = 0;

B31 = -(cos(x(1)) + cos(x(2))*sin(x(1)))*(arm.I3 + arm.I4);
B32 = arm.m4*arm.s4^2*sin(2*x(4));
B33 = arm.I3*cos(x(1)) + arm.I4*cos(x(1)) - ...
    arm.I4*sin(x(1) - x(4));
B34 = 2*arm.m4*arm.s4^2*cos(2*x(4));
B35 = 0;
B36 = -8*arm.m4*arm.s4^2*cos(2*x(4));

B41 = 0;
B42 = arm.I4*sin(x(1) - x(4)) - arm.I4*cos(x(1)) - ...
    arm.I3*cos(x(1));
B43 = 2*arm.m4*arm.s4;
B44 = 0;
B45 = 2*arm.m4;
B46 = 0;
 
B = [ B11 B12 B13 B14 B15 B16;
      B21 B22 B23 B24 B25 B26;
      B31 B32 B33 B34 B35 B36;
      B41 B42 B43 B44 B45 B46 ];
  
% [x_dot*x.dot ]
x_dotx_dot = [ x(5)*x(6);   % th1_dot*th2_dot
               x(5)*x(7);   % th1_dot*th3_dot
               x(5)*x(8);   % th1_dot*th4_dot
               x(6)*x(7);   % th2_dot*th3_dot
               x(6)*x(8);   % th2_dot*th4_dot
               x(7)*x(8) ]; % th3_dot*th4_dot
     
     
     
% Centrifugal
C11 = arm.m4*arm.s4^2*cos(x(2))^2*cos(x(4))*sin(x(3))*...
    sin(x(4)) - (arm.m3*arm.s3^2*sin(2*x(2)))/2 - ...
    arm.m4*arm.s4^2*cos(x(2))*cos(x(4))^2*sin(x(2)) - ...
    2*arm.l3*arm.m4*arm.s4*cos(x(2))*cos(x(4))*sin(x(2)) - ...
    (arm.l3^2*arm.m4*sin(2*x(2)))/2 - ...
    arm.m4*arm.s4^2*cos(x(4))*sin(x(2))^2*sin(x(3))*...
    sin(x(4)) + ...
    arm.l3*arm.m4*arm.s4*cos(x(2))^2*sin(x(3))*sin(x(4)) - ...
    arm.l3*arm.m4*arm.s4*sin(x(2))^2*sin(x(3))*sin(x(4)) + ...
    arm.m4*arm.s4^2*cos(x(2))*sin(x(2))*sin(x(3))^2*...
    sin(x(4))^2;
C12 = (arm.m4*arm.s4^2*sin(2*x(3))*cos(x(4))^2)/2 - ...
    arm.I4*cos(x(1))*cos(x(2)) - ...
    (arm.m4*arm.s4^2*sin(2*x(3)))/2 - ...
    arm.I3*cos(x(1))*cos(x(2));
C13 = arm.I3*sin(x(1)) + arm.I4*sin(x(1)) - ...
    (arm.m4*arm.s4^2*sin(2*x(4)))/2;
C14 = arm.I4*cos(x(1) - x(4)) - arm.m4*arm.s4;

C21 = arm.l3^2*arm.m4*cos(x(2))^2 - ...
    arm.I4*cos(x(2))*sin(x(1)) - ...
    arm.I3*cos(x(2))*sin(x(1)) + ...
    arm.m3*arm.s3^2*cos(x(2))^2 - ...
    arm.l3^2*arm.m4*sin(x(2))^2 - ...
    arm.m3*arm.s3^2*sin(x(2))^2 + ...
    arm.m4*arm.s4^2*cos(x(2))^2*cos(x(4))^2 - ...
    arm.m4*arm.s4^2*cos(x(4))^2*sin(x(2))^2 - ...
    arm.m4*arm.s4^2*cos(x(2))^2*sin(x(3))^2*sin(x(4))^2 + ...
    arm.m4*arm.s4^2*sin(x(2))^2*sin(x(3))^2*sin(x(4))^2 + ...
    2*arm.l3*arm.m4*arm.s4*cos(x(2))^2*cos(x(4)) - ...
    2*arm.l3*arm.m4*arm.s4*cos(x(4))*sin(x(2))^2 + ...
    4*arm.m4*arm.s4^2*cos(x(2))*cos(x(4))*sin(x(2))*...
    sin(x(3))*sin(x(4)) + ...
    4*arm.l3*arm.m4*arm.s4*cos(x(2))*sin(x(2))*sin(x(3))*...
    sin(x(4));
C22 = -arm.m4*arm.s4^2*cos(2*x(3))*(cos(x(4))^2 - 1);
C23 = -arm.m4*arm.s4^2*cos(2*x(4));
C24 = -arm.m4;

C31 = 4*arm.m4*arm.s4^2*cos(x(2))^2*cos(x(4))*sin(x(3))*...
    sin(x(4)) - arm.I4*sin(x(1)) - ...
    2*arm.l3^2*arm.m4*sin(2*x(2)) - ...
    2*arm.m3*arm.s3^2*sin(2*x(2)) - ...
    4*arm.m4*arm.s4^2*cos(x(2))*cos(x(4))^2*sin(x(2)) - ...
    8*arm.l3*arm.m4*arm.s4*cos(x(2))*cos(x(4))*sin(x(2)) - ...
    arm.I3*sin(x(1)) - ...
    4*arm.m4*arm.s4^2*cos(x(4))*sin(x(2))^2*sin(x(3))*...
    sin(x(4)) + ...
    4*arm.l3*arm.m4*arm.s4*cos(x(2))^2*sin(x(3))*sin(x(4)) -...
    4*arm.l3*arm.m4*arm.s4*sin(x(2))^2*sin(x(3))*sin(x(4)) +...
    4*arm.m4*arm.s4^2*cos(x(2))*sin(x(2))*sin(x(3))^2*...
    sin(x(4))^2;
C32 = 2*arm.m4*arm.s4^2*sin(2*x(3))*sin(x(4))^2;
C33 = -2*arm.m4*arm.s4^2*sin(2*x(4));
C34 = 0;

C41 = arm.I4*cos(x(1))*sin(x(4)) - ...
    arm.I4*cos(x(4))*sin(x(1)) - ...
    4*arm.l3^2*arm.m4*cos(x(2))^2 - ...
    4*arm.m3*arm.s3^2*cos(x(2))^2 + ...
    4*arm.l3^2*arm.m4*sin(x(2))^2 + ...
    4*arm.m3*arm.s3^2*sin(x(2))^2 - ...
    4*arm.m4*arm.s4^2*cos(x(2))^2*cos(x(4))^2 + ...
    4*arm.m4*arm.s4^2*cos(x(4))^2*sin(x(2))^2 + ...
    4*arm.m4*arm.s4^2*cos(x(2))^2*sin(x(3))^2*sin(x(4))^2 - ...
    4*arm.m4*arm.s4^2*sin(x(2))^2*sin(x(3))^2*sin(x(4))^2 - ...
    8*arm.l3*arm.m4*arm.s4*cos(x(2))^2*cos(x(4)) + ...
    8*arm.l3*arm.m4*arm.s4*cos(x(4))*sin(x(2))^2 - ...
    16*arm.m4*arm.s4^2*cos(x(2))*cos(x(4))*sin(x(2))*...
    sin(x(3))*sin(x(4)) - ...
    16*arm.l3*arm.m4*arm.s4*cos(x(2))*sin(x(2))*sin(x(3))*...
    sin(x(4));
C42 = -4*arm.m4*arm.s4^2*cos(2*x(3))*(cos(x(4))^2 - 1);
C43 = 4*arm.m4*arm.s4^2*cos(2*x(4));
C44 = 0;

C = [ C11 C12 C13 C14;
      C21 C22 C23 C24;
      C31 C32 C33 C34;
      C41 C42 C43 C44 ];

  
V = B*x_dotx_dot + C*x(5:8).^2;
  
  

% Gravity  
G1 = (9.81*arm.m4*(arm.s4*(sin(x(4))*(cos(x(1))*cos(x(3)) + ...
    sin(x(1))*sin(x(2))*sin(x(3))) + ...
    cos(x(2))*cos(x(4))*sin(x(1))) + ...
    arm.l3*cos(x(2))*sin(x(1)))) + ...
    (9.81*arm.m3*arm.s3*cos(x(2))*sin(x(1)));
G2 = (9.81*arm.m4*cos(x(1))*(arm.l3*sin(x(2)) + ...
    arm.s4*cos(x(4))*sin(x(2)) - ...
    arm.s4*cos(x(2))*sin(x(3))*sin(x(4)))) + ...
    (9.81*arm.m3*arm.s3*cos(x(1))*sin(x(2)));
G3 = -(9.81*arm.m4*arm.s4*sin(x(4))*(sin(x(1))*sin(x(3)) + ...
    cos(x(1))*cos(x(3))*sin(x(2))));
G4 = (9.81*arm.m4*arm.s4*(cos(x(4))*(cos(x(3))*sin(x(1)) - ...
    cos(x(1))*sin(x(2))*sin(x(3))) + ...
    cos(x(1))*cos(x(2))*sin(x(4))));


G = [ G1; G2; G3; G4 ];


Damping = arm.B*x(5:8);

f = [ x(5:8); M\(u - V - G - Damping)];





end
